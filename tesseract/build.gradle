plugins {
	id 'com.android.library'
	id 'maven-publish'
}

android {
	namespace 'cz.adaptech.thirdparty.tesseract'
	compileSdk 34
	ndkVersion rootProject.ext.ndkVersion

	defaultConfig {
		minSdk 16

		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		consumerProguardFiles "consumer-rules.pro"
		externalNativeBuild {
			cmake {
				cppFlags ''
				arguments "-DANDROID_STL=c++_shared"
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
		debug {
			externalNativeBuild {
				cmake {
					// Force building release version of native libraries even in debug variant.
					// This is for projects that has direct dependency on this library,
					// but doesn't really want its debug version, which is very slow.
					// Note that this only affects native code.
					arguments += "-DCMAKE_BUILD_TYPE=Release"
				}
			}
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_17
		targetCompatibility JavaVersion.VERSION_17
	}
	buildFeatures {
		prefabPublishing true
		prefab true
	}
	prefab {
		tesseract {
			headers "src/main/cpp/tesseract/src/include"
		}
	}
	externalNativeBuild {
		cmake {
			path file('src/main/cpp/CMakeLists.txt')
			version rootProject.ext.cmakeVersion
		}
	}
	flavorDimensions = ["parallelization"]
	productFlavors {
		standard {
		}
		openmp {
			externalNativeBuild {
				cmake {
					// NOTE: We must add -static-openmp argument to build it statically,
					// because shared library is not being included in the resulting APK.
					// See: https://github.com/android/ndk/issues/1028
					// Use of that argument shows warnings during build:
					// > C/C++: clang: warning: argument unused during compilation: '-static-openmp' [-Wunused-command-line-argument]
					// But it has no effect on the result.
					cFlags "-fopenmp -static-openmp -Wno-unused-command-line-argument"
					cppFlags "-fopenmp -static-openmp -Wno-unused-command-line-argument"
				}
			}
		}
	}
	publishing {
		singleVariant("release") {
			withSourcesJar()
			withJavadocJar()
		}
		singleVariant("openmpRelease") {
			withSourcesJar()
			withJavadocJar()
		}
	}
}

dependencies {
	// Intentionally use old version of annotation library which doesn't depend on kotlin-stdlib
	// to not unnecessarily complicate client projects due to potential duplicate class build errors
	// caused by https://kotlinlang.org/docs/whatsnew18.html#updated-jvm-compilation-target
	//noinspection GradleDependency
	implementation 'androidx.annotation:annotation:1.3.0'

	implementation project(':leptonica')

	testImplementation 'junit:junit:4.13.2'
	androidTestImplementation 'androidx.test.ext:junit:1.1.5'
	androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

afterEvaluate {
	publishing {
		publications {
			standard(MavenPublication) {
				from components.findByName('standardRelease')

				groupId 'cz.adaptech.thirdparty'
				artifactId 'tesseract'
				version rootProject.ext.tesseractVersion
			}
			openmp(MavenPublication) {
				from components.findByName('openmpRelease')

				groupId 'cz.adaptech.thirdparty'
				artifactId 'tesseract-openmp'
				version rootProject.ext.tesseractVersion
			}
		}
	}
}

// Workaround for errors caused by building modules in parallel
// See https://issuetracker.google.com/issues/265544858#comment22
afterEvaluate {
	android.libraryVariants.configureEach { variant ->
		variant.preBuildProvider.configure {
			// Add all the project dependencies here
			// NOTE: Leptonica doesn't use any flavor, so use just name of buildType
			dependsOn.add(":leptonica:prefab${variant.buildType.name.capitalize()}ConfigurePackage")
		}

		// Add this to any package that publishes a prefab
		tasks.named("prefab${variant.name.capitalize()}ConfigurePackage").configure {
			outputs.upToDateWhen { false }
		}
	}
}

